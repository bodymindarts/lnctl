// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

// struct PubKey, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct PubKey(pub [u8; 33]);
impl Default for PubKey { 
  fn default() -> Self { 
    Self([0; 33])
  }
}
impl std::fmt::Debug for PubKey {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    f.debug_struct("PubKey")
      .field("bytes", &self.bytes())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PubKey {}
impl flatbuffers::SafeSliceAccess for PubKey {}
impl<'a> flatbuffers::Follow<'a> for PubKey {
  type Inner = &'a PubKey;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a PubKey>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a PubKey {
  type Inner = &'a PubKey;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<PubKey>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for PubKey {
    type Output = PubKey;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const PubKey as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b PubKey {
    type Output = PubKey;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const PubKey as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for PubKey {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}
impl<'a> PubKey {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    bytes: &[u8; 33],
  ) -> Self {
    let mut s = Self([0; 33]);
    s.set_bytes(&bytes);
    s
  }

  pub fn bytes(&'a self) -> flatbuffers::Array<'a, u8, 33> {
    flatbuffers::Array::follow(&self.0, 0)
  }

  pub fn set_bytes(&mut self, items: &[u8; 33]) {
    flatbuffers::emplace_scalar_array(&mut self.0, 0, items);
  }

}

