// automatically generated by the FlatBuffers compiler, do not modify



use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_MESSAGE: u8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_MESSAGE: u8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_MESSAGE: [Message; 2] = [
  Message::NONE,
  Message::NodeAnnouncement,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Message(pub u8);
#[allow(non_upper_case_globals)]
impl Message {
  pub const NONE: Self = Self(0);
  pub const NodeAnnouncement: Self = Self(1);

  pub const ENUM_MIN: u8 = 0;
  pub const ENUM_MAX: u8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NONE,
    Self::NodeAnnouncement,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NONE => Some("NONE"),
      Self::NodeAnnouncement => Some("NodeAnnouncement"),
      _ => None,
    }
  }
}
impl std::fmt::Debug for Message {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Message {
  type Inner = Self;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = unsafe {
      flatbuffers::read_scalar_at::<u8>(buf, loc)
    };
    Self(b)
  }
}

impl flatbuffers::Push for Message {
    type Output = Message;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        unsafe { flatbuffers::emplace_scalar::<u8>(dst, self.0); }
    }
}

impl flatbuffers::EndianScalar for Message {
  #[inline]
  fn to_little_endian(self) -> Self {
    let b = u8::to_le(self.0);
    Self(b)
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(self) -> Self {
    let b = u8::from_le(self.0);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Message {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    u8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Message {}
pub struct MessageUnionTableOffset {}

// struct PubKey, aligned to 1
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct PubKey(pub [u8; 33]);
impl Default for PubKey { 
  fn default() -> Self { 
    Self([0; 33])
  }
}
impl std::fmt::Debug for PubKey {
  fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
    f.debug_struct("PubKey")
      .field("bytes", &self.bytes())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PubKey {}
impl flatbuffers::SafeSliceAccess for PubKey {}
impl<'a> flatbuffers::Follow<'a> for PubKey {
  type Inner = &'a PubKey;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a PubKey>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a PubKey {
  type Inner = &'a PubKey;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<PubKey>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for PubKey {
    type Output = PubKey;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const PubKey as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b PubKey {
    type Output = PubKey;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const PubKey as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}

impl<'a> flatbuffers::Verifiable for PubKey {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}
impl<'a> PubKey {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    bytes: &[i8; 33],
  ) -> Self {
    let mut s = Self([0; 33]);
    s.set_bytes(&bytes);
    s
  }

  pub fn bytes(&'a self) -> flatbuffers::Array<'a, i8, 33> {
    flatbuffers::Array::follow(&self.0, 0)
  }

  pub fn set_bytes(&mut self, items: &[i8; 33]) {
    flatbuffers::emplace_scalar_array(&mut self.0, 0, items);
  }

}

pub enum NodeAnnouncementOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NodeAnnouncement<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NodeAnnouncement<'a> {
    type Inner = NodeAnnouncement<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> NodeAnnouncement<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        NodeAnnouncement { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args NodeAnnouncementArgs<'args>) -> flatbuffers::WIPOffset<NodeAnnouncement<'bldr>> {
      let mut builder = NodeAnnouncementBuilder::new(_fbb);
      if let Some(x) = args.node_id { builder.add_node_id(x); }
      builder.finish()
    }

    pub const VT_NODE_ID: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn node_id(&self) -> Option<&'a PubKey> {
    self._tab.get::<PubKey>(NodeAnnouncement::VT_NODE_ID, None)
  }
}

impl flatbuffers::Verifiable for NodeAnnouncement<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PubKey>(&"node_id", Self::VT_NODE_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct NodeAnnouncementArgs<'a> {
    pub node_id: Option<&'a PubKey>,
}
impl<'a> Default for NodeAnnouncementArgs<'a> {
    #[inline]
    fn default() -> Self {
        NodeAnnouncementArgs {
            node_id: None,
        }
    }
}
pub struct NodeAnnouncementBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> NodeAnnouncementBuilder<'a, 'b> {
  #[inline]
  pub fn add_node_id(&mut self, node_id: &PubKey) {
    self.fbb_.push_slot_always::<&PubKey>(NodeAnnouncement::VT_NODE_ID, node_id);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> NodeAnnouncementBuilder<'a, 'b> {
    let start = _fbb.start_table();
    NodeAnnouncementBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NodeAnnouncement<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for NodeAnnouncement<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("NodeAnnouncement");
      ds.field("node_id", &self.node_id());
      ds.finish()
  }
}
pub enum GossipRecordOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GossipRecord<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GossipRecord<'a> {
    type Inner = GossipRecord<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> GossipRecord<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        GossipRecord { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args GossipRecordArgs) -> flatbuffers::WIPOffset<GossipRecord<'bldr>> {
      let mut builder = GossipRecordBuilder::new(_fbb);
      builder.add_received_at(args.received_at);
      if let Some(x) = args.msg { builder.add_msg(x); }
      builder.add_msg_type(args.msg_type);
      builder.finish()
    }

    pub const VT_RECEIVED_AT: flatbuffers::VOffsetT = 4;
    pub const VT_MSG_TYPE: flatbuffers::VOffsetT = 6;
    pub const VT_MSG: flatbuffers::VOffsetT = 8;

  #[inline]
  pub fn received_at(&self) -> u64 {
    self._tab.get::<u64>(GossipRecord::VT_RECEIVED_AT, Some(0)).unwrap()
  }
  #[inline]
  pub fn msg_type(&self) -> Message {
    self._tab.get::<Message>(GossipRecord::VT_MSG_TYPE, Some(Message::NONE)).unwrap()
  }
  #[inline]
  pub fn msg(&self) -> Option<flatbuffers::Table<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(GossipRecord::VT_MSG, None)
  }
  #[inline]
  #[allow(non_snake_case)]
  pub fn msg_as_node_announcement(&self) -> Option<NodeAnnouncement<'a>> {
    if self.msg_type() == Message::NodeAnnouncement {
      self.msg().map(NodeAnnouncement::init_from_table)
    } else {
      None
    }
  }

}

impl flatbuffers::Verifiable for GossipRecord<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>(&"received_at", Self::VT_RECEIVED_AT, false)?
     .visit_union::<Message, _>(&"msg_type", Self::VT_MSG_TYPE, &"msg", Self::VT_MSG, false, |key, v, pos| {
        match key {
          Message::NodeAnnouncement => v.verify_union_variant::<flatbuffers::ForwardsUOffset<NodeAnnouncement>>("Message::NodeAnnouncement", pos),
          _ => Ok(()),
        }
     })?
     .finish();
    Ok(())
  }
}
pub struct GossipRecordArgs {
    pub received_at: u64,
    pub msg_type: Message,
    pub msg: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
}
impl<'a> Default for GossipRecordArgs {
    #[inline]
    fn default() -> Self {
        GossipRecordArgs {
            received_at: 0,
            msg_type: Message::NONE,
            msg: None,
        }
    }
}
pub struct GossipRecordBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GossipRecordBuilder<'a, 'b> {
  #[inline]
  pub fn add_received_at(&mut self, received_at: u64) {
    self.fbb_.push_slot::<u64>(GossipRecord::VT_RECEIVED_AT, received_at, 0);
  }
  #[inline]
  pub fn add_msg_type(&mut self, msg_type: Message) {
    self.fbb_.push_slot::<Message>(GossipRecord::VT_MSG_TYPE, msg_type, Message::NONE);
  }
  #[inline]
  pub fn add_msg(&mut self, msg: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GossipRecord::VT_MSG, msg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GossipRecordBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GossipRecordBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GossipRecord<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for GossipRecord<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("GossipRecord");
      ds.field("received_at", &self.received_at());
      ds.field("msg_type", &self.msg_type());
      match self.msg_type() {
        Message::NodeAnnouncement => {
          if let Some(x) = self.msg_as_node_announcement() {
            ds.field("msg", &x)
          } else {
            ds.field("msg", &"InvalidFlatbuffer: Union discriminant does not match value.")
          }
        },
        _ => {
          let x: Option<()> = None;
          ds.field("msg", &x)
        },
      };
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_gossip_record<'a>(buf: &'a [u8]) -> GossipRecord<'a> {
  unsafe { flatbuffers::root_unchecked::<GossipRecord<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_gossip_record<'a>(buf: &'a [u8]) -> GossipRecord<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<GossipRecord<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `GossipRecord`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gossip_record_unchecked`.
pub fn root_as_gossip_record(buf: &[u8]) -> Result<GossipRecord, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<GossipRecord>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `GossipRecord` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_gossip_record_unchecked`.
pub fn size_prefixed_root_as_gossip_record(buf: &[u8]) -> Result<GossipRecord, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<GossipRecord>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `GossipRecord` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gossip_record_unchecked`.
pub fn root_as_gossip_record_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GossipRecord<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<GossipRecord<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `GossipRecord` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gossip_record_unchecked`.
pub fn size_prefixed_root_as_gossip_record_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GossipRecord<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<GossipRecord<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a GossipRecord and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `GossipRecord`.
pub unsafe fn root_as_gossip_record_unchecked(buf: &[u8]) -> GossipRecord {
  flatbuffers::root_unchecked::<GossipRecord>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed GossipRecord and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `GossipRecord`.
pub unsafe fn size_prefixed_root_as_gossip_record_unchecked(buf: &[u8]) -> GossipRecord {
  flatbuffers::size_prefixed_root_unchecked::<GossipRecord>(buf)
}
#[inline]
pub fn finish_gossip_record_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<GossipRecord<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_gossip_record_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<GossipRecord<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
