// automatically generated by the FlatBuffers compiler, do not modify



use crate::shared_generated::*;
use std::mem;
use std::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MonitoredChannelStateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MonitoredChannelState<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MonitoredChannelState<'a> {
    type Inner = MonitoredChannelState<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self { _tab: flatbuffers::Table { buf, loc } }
    }
}

impl<'a> MonitoredChannelState<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        MonitoredChannelState { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args MonitoredChannelStateArgs<'args>) -> flatbuffers::WIPOffset<MonitoredChannelState<'bldr>> {
      let mut builder = MonitoredChannelStateBuilder::new(_fbb);
      builder.add_archived_timestamp(args.archived_timestamp);
      builder.add_scrape_timestamp(args.scrape_timestamp);
      if let Some(x) = args.state { builder.add_state(x); }
      if let Some(x) = args.connector_id { builder.add_connector_id(x); }
      if let Some(x) = args.monitored_node_id { builder.add_monitored_node_id(x); }
      builder.finish()
    }

    pub const VT_MONITORED_NODE_ID: flatbuffers::VOffsetT = 4;
    pub const VT_CONNECTOR_ID: flatbuffers::VOffsetT = 6;
    pub const VT_SCRAPE_TIMESTAMP: flatbuffers::VOffsetT = 8;
    pub const VT_ARCHIVED_TIMESTAMP: flatbuffers::VOffsetT = 10;
    pub const VT_STATE: flatbuffers::VOffsetT = 12;

  #[inline]
  pub fn monitored_node_id(&self) -> Option<&'a PubKey> {
    self._tab.get::<PubKey>(MonitoredChannelState::VT_MONITORED_NODE_ID, None)
  }
  #[inline]
  pub fn connector_id(&self) -> Option<&'a ConnectorId> {
    self._tab.get::<ConnectorId>(MonitoredChannelState::VT_CONNECTOR_ID, None)
  }
  #[inline]
  pub fn scrape_timestamp(&self) -> u64 {
    self._tab.get::<u64>(MonitoredChannelState::VT_SCRAPE_TIMESTAMP, Some(0)).unwrap()
  }
  #[inline]
  pub fn archived_timestamp(&self) -> u64 {
    self._tab.get::<u64>(MonitoredChannelState::VT_ARCHIVED_TIMESTAMP, Some(0)).unwrap()
  }
  #[inline]
  pub fn state(&self) -> Option<ChannelState<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<ChannelState>>(MonitoredChannelState::VT_STATE, None)
  }
}

impl flatbuffers::Verifiable for MonitoredChannelState<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<PubKey>(&"monitored_node_id", Self::VT_MONITORED_NODE_ID, false)?
     .visit_field::<ConnectorId>(&"connector_id", Self::VT_CONNECTOR_ID, false)?
     .visit_field::<u64>(&"scrape_timestamp", Self::VT_SCRAPE_TIMESTAMP, false)?
     .visit_field::<u64>(&"archived_timestamp", Self::VT_ARCHIVED_TIMESTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<ChannelState>>(&"state", Self::VT_STATE, false)?
     .finish();
    Ok(())
  }
}
pub struct MonitoredChannelStateArgs<'a> {
    pub monitored_node_id: Option<&'a PubKey>,
    pub connector_id: Option<&'a ConnectorId>,
    pub scrape_timestamp: u64,
    pub archived_timestamp: u64,
    pub state: Option<flatbuffers::WIPOffset<ChannelState<'a>>>,
}
impl<'a> Default for MonitoredChannelStateArgs<'a> {
    #[inline]
    fn default() -> Self {
        MonitoredChannelStateArgs {
            monitored_node_id: None,
            connector_id: None,
            scrape_timestamp: 0,
            archived_timestamp: 0,
            state: None,
        }
    }
}
pub struct MonitoredChannelStateBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> MonitoredChannelStateBuilder<'a, 'b> {
  #[inline]
  pub fn add_monitored_node_id(&mut self, monitored_node_id: &PubKey) {
    self.fbb_.push_slot_always::<&PubKey>(MonitoredChannelState::VT_MONITORED_NODE_ID, monitored_node_id);
  }
  #[inline]
  pub fn add_connector_id(&mut self, connector_id: &ConnectorId) {
    self.fbb_.push_slot_always::<&ConnectorId>(MonitoredChannelState::VT_CONNECTOR_ID, connector_id);
  }
  #[inline]
  pub fn add_scrape_timestamp(&mut self, scrape_timestamp: u64) {
    self.fbb_.push_slot::<u64>(MonitoredChannelState::VT_SCRAPE_TIMESTAMP, scrape_timestamp, 0);
  }
  #[inline]
  pub fn add_archived_timestamp(&mut self, archived_timestamp: u64) {
    self.fbb_.push_slot::<u64>(MonitoredChannelState::VT_ARCHIVED_TIMESTAMP, archived_timestamp, 0);
  }
  #[inline]
  pub fn add_state(&mut self, state: flatbuffers::WIPOffset<ChannelState<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ChannelState>>(MonitoredChannelState::VT_STATE, state);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> MonitoredChannelStateBuilder<'a, 'b> {
    let start = _fbb.start_table();
    MonitoredChannelStateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MonitoredChannelState<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl std::fmt::Debug for MonitoredChannelState<'_> {
  fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
    let mut ds = f.debug_struct("MonitoredChannelState");
      ds.field("monitored_node_id", &self.monitored_node_id());
      ds.field("connector_id", &self.connector_id());
      ds.field("scrape_timestamp", &self.scrape_timestamp());
      ds.field("archived_timestamp", &self.archived_timestamp());
      ds.field("state", &self.state());
      ds.finish()
  }
}
#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_root_as_monitored_channel_state<'a>(buf: &'a [u8]) -> MonitoredChannelState<'a> {
  unsafe { flatbuffers::root_unchecked::<MonitoredChannelState<'a>>(buf) }
}

#[inline]
#[deprecated(since="2.0.0", note="Deprecated in favor of `root_as...` methods.")]
pub fn get_size_prefixed_root_as_monitored_channel_state<'a>(buf: &'a [u8]) -> MonitoredChannelState<'a> {
  unsafe { flatbuffers::size_prefixed_root_unchecked::<MonitoredChannelState<'a>>(buf) }
}

#[inline]
/// Verifies that a buffer of bytes contains a `MonitoredChannelState`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_monitored_channel_state_unchecked`.
pub fn root_as_monitored_channel_state(buf: &[u8]) -> Result<MonitoredChannelState, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MonitoredChannelState>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MonitoredChannelState` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_monitored_channel_state_unchecked`.
pub fn size_prefixed_root_as_monitored_channel_state(buf: &[u8]) -> Result<MonitoredChannelState, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MonitoredChannelState>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MonitoredChannelState` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_monitored_channel_state_unchecked`.
pub fn root_as_monitored_channel_state_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MonitoredChannelState<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MonitoredChannelState<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MonitoredChannelState` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_monitored_channel_state_unchecked`.
pub fn size_prefixed_root_as_monitored_channel_state_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MonitoredChannelState<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MonitoredChannelState<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MonitoredChannelState and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MonitoredChannelState`.
pub unsafe fn root_as_monitored_channel_state_unchecked(buf: &[u8]) -> MonitoredChannelState {
  flatbuffers::root_unchecked::<MonitoredChannelState>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MonitoredChannelState and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MonitoredChannelState`.
pub unsafe fn size_prefixed_root_as_monitored_channel_state_unchecked(buf: &[u8]) -> MonitoredChannelState {
  flatbuffers::size_prefixed_root_unchecked::<MonitoredChannelState>(buf)
}
#[inline]
pub fn finish_monitored_channel_state_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<MonitoredChannelState<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_monitored_channel_state_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<MonitoredChannelState<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
